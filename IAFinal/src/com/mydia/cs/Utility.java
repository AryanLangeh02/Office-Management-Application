/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mydia.cs;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Utility {
    
        public static boolean createNewDb (String databaseName ,String pw, String pt, String uname) 
        //creating the database
{
        try {
            Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:"+pt+"/", uname,pw);
            Statement stmt = conn.createStatement();
            stmt.executeUpdate("CREATE DATABASE " + databaseName);
            conn.close();
            return true;
        } catch (Exception e) {
            return false;
        }
}
        public static boolean setSeedDatabase(String databaseName ,String pw, String pt, String uname) 
        //creating the tables
{        
       Connection connection = null; 
       boolean result = false; 
       try { 
            connection = DriverManager.getConnection("jdbc:postgresql://localhost:"+pt+"/" + databaseName, uname, pw);
            Statement stmt = connection.createStatement(); 
            String clients = "CREATE TABLE public.clients\n" +
"(\n" +
"    client_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
"    client_name character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    phone_number character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    email character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    number_of_orders integer,\n" +
"    date_joined character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    head_employee character varying COLLATE pg_catalog.\"default\",\n" +
"    CONSTRAINT clients_pkey PRIMARY KEY (client_id)\n" +
");";
            stmt.executeUpdate(clients);

            String logintrackertbl = 
                    "CREATE TABLE public.logintracker\n" +
"(\n" +
"    email character varying COLLATE pg_catalog.\"default\",\n" +
"    password character varying COLLATE pg_catalog.\"default\",\n" +
"    emp_name character varying COLLATE pg_catalog.\"default\",\n" +
"    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),\n" +
"    CONSTRAINT logintracker_pkey PRIMARY KEY (id)\n" +
");";
            stmt.executeUpdate(logintrackertbl);
            String materials = 
                    "CREATE TABLE public.materials\n" +
"(\n" +
"    material_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
"    material_name character varying COLLATE pg_catalog.\"default\",\n" +
"    existing_quantity integer,\n" +
"    CONSTRAINT materials_pkey PRIMARY KEY (material_id)\n" +
");";
            stmt.executeUpdate(materials);
            
            String credentials = 
                    "CREATE TABLE public.credentials\n" +
"(\n" +
"    email character varying(80) COLLATE pg_catalog.\"default\" NOT NULL,\n" +
"    password character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    type character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    name character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    \"employee_ID\" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
"    CONSTRAINT credentials_pkey PRIMARY KEY (\"employee_ID\")\n" +
");";
            stmt.executeUpdate(credentials);
            
                        String orders = 
                    "CREATE TABLE public.orders\n" +
"(\n" +
"    order_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
"    material_name character varying COLLATE pg_catalog.\"default\",\n" +
"    quantity integer,\n" +
"    order_status character varying COLLATE pg_catalog.\"default\",\n" +
"    heademployee character varying(255) COLLATE pg_catalog.\"default\",\n" +
"    CONSTRAINT orders_pkey PRIMARY KEY (order_id)\n" +
");";
            stmt.executeUpdate(orders);
                    String invoices = 
                    "CREATE TABLE public.invoices\n" +
"(\n" +
"    \"Invoice_ID\" bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),\n" +
"    project_name character varying COLLATE pg_catalog.\"default\",\n" +
"    client_name character varying COLLATE pg_catalog.\"default\",\n" +
"    amount bigint,\n" +
"    type character varying COLLATE pg_catalog.\"default\",\n" +
"    heademployee character varying COLLATE pg_catalog.\"default\",\n" +
"    payable_date character varying COLLATE pg_catalog.\"default\",\n" +
"    date_issued character varying COLLATE pg_catalog.\"default\",\n" +
"    month character varying COLLATE pg_catalog.\"default\",\n" +
"    CONSTRAINT \"Invoices_pkey\" PRIMARY KEY (\"Invoice_ID\")\n" +
");";
            stmt.executeUpdate(invoices);
            String payments = 
                    "CREATE TABLE public.payments\n" +
"(\n" +
"    account_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),\n" +
"    client_name character varying COLLATE pg_catalog.\"default\",\n" +
"    project_name character varying COLLATE pg_catalog.\"default\",\n" +
"    total_amount integer,\n" +
"    amount_paid integer,\n" +
"    amount_outstanding integer,\n" +
"    payable_date character varying COLLATE pg_catalog.\"default\",\n" +
"    CONSTRAINT \"Payments_pkey\" PRIMARY KEY (account_id)\n" +
");";
            stmt.executeUpdate(payments);
            String projectdetails = 
                    "CREATE TABLE public.projectdetails\n" +
"(\n" +
"    project_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n" +
"    project_name character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    client_name character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    head_employee character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    structure_type character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    project_status character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    location character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    total_amount integer,\n" +
"    delivery_date character varying(80) COLLATE pg_catalog.\"default\",\n" +
"    CONSTRAINT \"Project_Details_pkey\" PRIMARY KEY (project_id)\n" +
");";
            stmt.executeUpdate(projectdetails);

            String query1 = "INSERT INTO credentials" + "(email, password, type, name)" + "VALUES (?, ?, ?, ?)"; 
            PreparedStatement statement = connection.prepareStatement(query1);
            statement.setString(1, "csiamanager@gmail.com");
            statement.setString(2, "ManagerTest123");
            statement.setString(3, "manager");
            statement.setString(4, "Manager Test");
            statement.executeUpdate();
            
            String query2 = "INSERT INTO credentials" + "(email, password, type, name)" + "VALUES (?, ?, ?, ?)"; 
            PreparedStatement statement2 = connection.prepareStatement(query2);
            statement2.setString(1, "csiaemployee@gmail.com");
            statement2.setString(2, "EmployeeTest123");
            statement2.setString(3, "employee");
            statement2.setString(4, "Employee Test");
            statement2.executeUpdate();
            result =  true; 

        }  

        catch (Exception e) { 

            result =  false; 

        } 

        finally{ 

           try { 

               if (connection!=null){ 

                connection.close(); 

               } 

           } catch (SQLException ex) {} 

            return result; 

       } 

    } 

     public static boolean doesDbExist(String databaseName ,String pt, String pw, String uname) 
    //checking to see if the database exists
    { 

       try { 

            String url = "jdbc:postgresql://localhost:"+pt+"/" + databaseName; 

            Connection conn = DriverManager.getConnection(url, uname,pw);  

            conn.close(); 

            return true; 

        } catch (Exception e) { 

            return false; 

        } 

} 

    public static boolean DropExistingDb(String databaseName ,String pt, String pw, String uname)
    //deleting /existing database with the same name
{ 

        try { 

            Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:"+pt+"/", uname,pw); 

            Statement stmt = conn.createStatement(); 
            // if any user is already using the database remove his connection 

            /*stmt.executeQuery(//"REVOKE CONNECT ON DATABASE " + databaseName + " FROM public;" +
                    "SELECT pg_terminate_backend(pg_stat_activity.pid) \n" + 

            "FROM pg_stat_activity WHERE pg_stat_activity.datname = '" + databaseName + "'\n" + 

            "AND pid <> pg_backend_pid()");*/
            
 stmt.executeQuery("SELECT pg_terminate_backend(pg_stat_activity.pid) \n" +
            "FROM pg_stat_activity WHERE pg_stat_activity.datname = '" + databaseName + "'\n" +
            "AND pid <> pg_backend_pid()");
 
            // now remove database as well 

            stmt.executeUpdate("DROP DATABASE " + databaseName); 

            conn.close(); 

            return true; 

        } catch (Exception e) { 

            return false; 

        } 

    } 

    public static String dbPass;
    public static String dbUser;
    public static String dbPort;
    }  
