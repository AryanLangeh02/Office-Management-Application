/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ia;

import com.mydia.cs.Utility;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/*import java.time.LocalDate;
import java.time.Month;*/


/**
 *
 * @author aryanlangeh
 */
public class addInvoices extends javax.swing.JFrame {
    private Object LocalDate;

    /**
     * Creates new form editInvoices
     */
    public addInvoices() {
        initComponents();
        fillCombo();
        //projectNames.setSelectedItem(0);
    }
    
    private void fillCombo() {
    try {
        Connection con = null;
            con = DriverManager.getConnection("jdbc:postgresql://localhost/officemanagement1",Utility.dbUser,Utility.dbPass);
            
            String query2 = "select emp_name from LoginTracker order by id DESC LIMIT 1";
            PreparedStatement statement2 = con.prepareStatement(query2);
            ResultSet rs1 = statement2.executeQuery(); 
                if (rs1.next()){
                    String name1 = rs1.getString("emp_name");
                    
                    String query = "select * from projectdetails where head_employee = ? and project_status = ?";
                    PreparedStatement statement = con.prepareStatement(query);
                    statement.setString(1, name1);
                    statement.setString(2, "In-Progress");
                    ResultSet result = statement.executeQuery();
                    
                    while (result.next()){
                
                    String name = result.getString("project_name");
                    //String totalamount = result.getString("total_amount");

                        projectNames.addItem(name);
                        //amount.setText(totalamount);
                    }
                    
                    /*String query3 = "Select client_name from projectdetails where project_name = ?" ;
                        PreparedStatement statement3 = con.prepareStatement(query3);
                        statement3.setString(1, (String)projectNames.getSelectedItem());
                        ResultSet rs3 = statement3.executeQuery();
                        
                    if (rs3.next()) {
                        String clientname = rs3.getString("client_name"); //getting the data from the database
                        clientName.setText(clientname);
                    }
                    String query4 = "Select * from projectdetails where project_name = ?" ;
                        PreparedStatement statement4 = con.prepareStatement(query4);
                        statement4.setObject(1, projectNames.getSelectedItem());
                        ResultSet rs4 = statement4.executeQuery();
                        
                    if (rs4.next()) {
                        int totalAmount = rs4.getInt("total_amount"); //getting the data from the database
                        String total = String.valueOf(totalAmount);
                        //amount.setText(total);
                    }*/
                }
    }
    catch(Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        projectNames = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        payableDate = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox();
        save = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        clientName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));
        jPanel1.setForeground(new java.awt.Color(0, 153, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Invoice");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Project Name: ");

        projectNames.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        projectNames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                projectNamesMouseClicked(evt);
            }
        });
        projectNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNamesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Client Name: ");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Amount: ");

        amount.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                amountKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Payable Date:");

        payableDate.setDateFormatString("yyyy-MM-dd");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Type:");

        type.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gate", "Staircase", "Railing" }));

        save.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        clientName.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, 0)
                        .addComponent(projectNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amount)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(payableDate, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clientName)))
                .addGap(74, 74, 74))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(projectNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(clientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(payableDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void projectNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNamesActionPerformed
        // TODO add your handling code here:
        try {
        Connection con = null;
            con = DriverManager.getConnection("jdbc:postgresql://localhost/officemanagement1",Utility.dbUser,Utility.dbPass);
            
            String query2 = "select emp_name from LoginTracker order by id DESC LIMIT 1";
            PreparedStatement statement2 = con.prepareStatement(query2);
            ResultSet rs1 = statement2.executeQuery(); 
                if (rs1.next()){
                    String name1 = rs1.getString("emp_name");
                    
                    String query = "select * from projectdetails where project_name = ?";
                    PreparedStatement statement = con.prepareStatement(query);
                    statement.setObject(1, projectNames.getSelectedItem());
                    ResultSet result = statement.executeQuery();
                    
                    while (result.next()){
                    String totalamount = result.getString("total_amount");
                    String projecttype = result.getString("structure_type");
                    String client = result.getString("client_name");
                    //String projectMonth = result.getString("month");
                    //String clientname = result.getString("client_name");
                        amount.setText(totalamount);
                        clientName.setText(client);
                        type.setSelectedItem(projecttype);
                        //month.setText(projectMonth);
                    } 
                }
                
    }
    catch(Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }
    }//GEN-LAST:event_projectNamesActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if (amount.getText().trim().isEmpty() || payableDate.getDate() == null){
        JOptionPane.showMessageDialog(null, "One of the fields is missing data. Please re-check.");
        }
        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat month = new SimpleDateFormat("MM");
                Date todayDate = new Date();
                Date payDate = payableDate.getDate();
                sdf1.format(todayDate);
                long differenceMilliseconds = payableDate.getDate().getTime() - todayDate.getTime();
                float differenceDays = (differenceMilliseconds / (1000 * 60 * 60 * 24));
        if (differenceDays < 2){
      JOptionPane.showMessageDialog(null, "Payable date is too soon. Please re-check.");}
        else {
        try {
            // TODO add your handling code here:
             //String username = System.getProperty("user.name");
    
            Connection con = null;
            con = DriverManager.getConnection("jdbc:postgresql://localhost/officemanagement1",Utility.dbUser,Utility.dbPass);
            
            String query = "INSERT INTO Invoices" + "(Project_Name, Client_Name, Amount, Date_issued, Payable_Date, Type, heademployee, month)" + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)"; //fix date and select client name from clients table
            PreparedStatement statement = con.prepareStatement(query);
            //LocalDate currentdate = LocalDate.now();
            //Month currentMonth = currentdate.getMonth();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date todayDate1 = new Date();
            String varDate1 = sdf.format(payableDate.getDate()); 
            statement.setObject(1,projectNames.getSelectedItem());
            String date = sdf.format(todayDate1);
            
            /*String query1 = "Select client_name, amount, type from Invoices where project_name = ?" ;
            PreparedStatement statement1 = con.prepareStatement(query1);
            statement.setObject(1,projectNames.getSelectedItem());
            ResultSet rs = statement1.executeQuery();
            if (rs.next()) {
                String setName = rs.getString("client_name"); //getting the data from the database
                clientName.setSelectedItem(setName);
                
                String setAmount = rs.getString("total_amount"); //getting the data from the database
                amount.setText(setAmount);
                
                String setType = rs.getString("structure_type"); //getting the data from the database
                type.setSelectedItem(setType);
            }*/
            
            statement.setString(2,clientName.getText()); //need to select from client list
            statement.setString(4,date);
            statement.setString(6,(String) type.getSelectedItem());
            statement.setString(5,varDate1);
            statement.setInt(3,Integer.parseInt(amount.getText()));
            statement.setString(8,month.format(payableDate.getDate()));
            
            String query2 = "select emp_name from LoginTracker order by id DESC LIMIT 1";
            PreparedStatement statement2 = con.prepareStatement(query2);
            ResultSet rs1 = statement2.executeQuery(); 
                        if (rs1.next()){
                           String name1 = rs1.getString("emp_name");
                            statement.setString(7,name1);
                            statement.executeUpdate();
                        }
            JOptionPane.showMessageDialog(null, "inserted successfully");
        } catch (SQLException ex) {
            Logger.getLogger(addProjectRejected.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        clientName.setText("");
        amount.setText("");
        payableDate.setCalendar(null);
        projectNames.setSelectedItem(0);
        type.setSelectedItem(0);
    }//GEN-LAST:event_saveActionPerformed

    private void projectNamesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_projectNamesMouseClicked
        // TODO add your handling code here:
        /*try {
        Connection con = null;
            con = DriverManager.getConnection("jdbc:postgresql://localhost/officemanagement1","postgres","postgres");
            
            String query2 = "select emp_name from LoginTracker order by id DESC LIMIT 1";
            PreparedStatement statement2 = con.prepareStatement(query2);
            ResultSet rs1 = statement2.executeQuery(); 
                if (rs1.next()){
                    String name1 = rs1.getString("emp_name");
                    
                    String query = "select * from projectdetails where project_name = ?";
                    PreparedStatement statement = con.prepareStatement(query);
                    statement.setObject(1, projectNames.getSelectedItem());
                    ResultSet result = statement.executeQuery();
                    
                    while (result.next()){
                
                    //String name = result.getString("project_name");
                    String clientname = result.getString("client_name");
                        //projectNames.addItem(name);
                        clientName.setText(clientname);
                    }
                }   
    }
    catch(Exception e) {
        JOptionPane.showMessageDialog(null, e);
    }*/
    }//GEN-LAST:event_projectNamesMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            this.setVisible(false);
            Connection con = null;
            con = DriverManager.getConnection("jdbc:postgresql://localhost/officemanagement1",Utility.dbUser,Utility.dbPass);
            String query2 = "select emp_name from LoginTracker order by id DESC LIMIT 1";
            PreparedStatement statement2 = con.prepareStatement(query2);
            
            ResultSet rs = statement2.executeQuery();
            if (rs.next()){
                String name1 = rs.getString("emp_name");
                String query3 = "select type from credentials where name = ?";
                PreparedStatement statement3 = con.prepareStatement(query3);
                statement3.setString(1, name1);
                ResultSet rs3 = statement3.executeQuery();
                    if (rs3.next()){
                        String employeeRole = rs3.getString("type");
                            if (employeeRole.equalsIgnoreCase("manager")){
                                new manager().setVisible(true);   
                            }
                            else if (employeeRole.equalsIgnoreCase("employee")){
                                new employee().setVisible(true);
                            }
                    }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(addProject.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void amountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c))){
        getToolkit().beep();
        evt.consume();
        }
    }//GEN-LAST:event_amountKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addInvoices().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.JTextField clientName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private com.toedter.calendar.JDateChooser payableDate;
    private javax.swing.JComboBox projectNames;
    private javax.swing.JButton save;
    private javax.swing.JComboBox type;
    // End of variables declaration//GEN-END:variables
}
